name: Deploy ElastiCache Backend to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > EC2Tutorial.pem
          chmod 600 EC2Tutorial.pem

      - name: Authenticate with ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region eu-central-1
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 183631324733.dkr.ecr.eu-central-1.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          echo "Building Docker image for ElastiCache backend..."
          docker build -t backend-redis:${{ github.sha }} ./backend_redis
          docker tag backend-redis:${{ github.sha }} 183631324733.dkr.ecr.eu-central-1.amazonaws.com/backend-redis:${{ github.sha }}
          docker push 183631324733.dkr.ecr.eu-central-1.amazonaws.com/backend-redis:${{ github.sha }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i EC2Tutorial.pem ec2-user@18.193.161.41 << 'EOF'
          echo "Connecting to EC2 instance..."
          cd /home/ec2-user/book-sales-platform || exit 1

          echo "Updating docker-compose.yml with new image tag..."
          sed -i "s|backend-redis:.*|backend-redis:${{ github.sha }}|" docker-compose.yml

          echo "Restarting all services..."
          docker-compose down || exit 1
          docker-compose up -d || exit 1

          echo "Deployment completed successfully!"
          EOF
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Cleanup Docker
        run: |
          echo "Cleaning up local Docker resources..."
          docker image prune -f
          docker container prune -f
